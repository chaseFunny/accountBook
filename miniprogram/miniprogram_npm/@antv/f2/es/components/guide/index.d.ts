declare const _default: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export default _default;
import withGuide from "./withGuide";
export var TextGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export var PointGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export var ArcGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export var LineGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export var RectGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export var ImageGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export var TagGuide: new (props: any) => {
    chart: import("../../chart").default;
    triggerRef: import("../../types").Ref;
    willMount(): void;
    didMount(): void;
    didUpdate(): void;
    getGuideBBox(): void;
    parseReplaceStr(value: any, scale: any): any;
    parsePoint(record: any): any;
    convertPoints(records: any): any;
    getGuideTheme(): any;
    render(): import("../..").JSX.Element;
    props: any;
    state: any;
    context: import("../../base/component").ComponentContext;
    refs: {
        [key: string]: import("../../base/component").default<any, any>;
    };
    updater: import("../../base/component").Updater<any>;
    children: import("../..").JSX.Element;
    container: any;
    animate: boolean;
    destroyed: boolean;
    willReceiveProps(_props: any, context?: any): void;
    willUpdate(): void;
    didUnmount(): void;
    setState(partialState: any, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    setAnimate(animate: boolean): void;
    destroy(): void;
};
export { withGuide };
