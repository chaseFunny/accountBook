import withGuide from './withGuide';
declare const TextGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const PointGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const LineGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const ArcGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const RectGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const ImageGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const TagGuide: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
declare const _default: {
    new (props: any): {
        chart: import("../../chart").default;
        triggerRef: import("../../types").Ref;
        willMount(): void;
        didMount(): void;
        didUpdate(): void;
        getGuideBBox(): void;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): any;
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("../..").JSX.Element;
        props: any;
        state: any;
        context: import("../../base/component").ComponentContext;
        refs: {
            [key: string]: import("../../base/component").default<any, any>;
        };
        updater: import("../../base/component").Updater<any>;
        children: import("../..").JSX.Element;
        container: any;
        animate: boolean;
        destroyed: boolean;
        willReceiveProps(_props: any, context?: any): void;
        willUpdate(): void;
        didUnmount(): void;
        setState(partialState: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
export default _default;
export { withGuide, TextGuide, PointGuide, ArcGuide, LineGuide, RectGuide, ImageGuide, TagGuide };
